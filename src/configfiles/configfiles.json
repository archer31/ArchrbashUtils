{"bash": {"dest": "~/.bashrc", "content": "# ~/.bashrc: executed by bash(1) for non-login shells.\n# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)\n# for examples\n\n# If not running interactively, don't do anything\ncase $- in\n    *i*) ;;\n      *) return;;\nesac\n\n# don't put duplicate lines or lines starting with space in the history.\n# See bash(1) for more options\nHISTCONTROL=ignoreboth\n\n# append to the history file, don't overwrite it\nshopt -s histappend\n\n# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)\nHISTSIZE=1000\nHISTFILESIZE=2000\n\n# check the window size after each command and, if necessary,\n# update the values of LINES and COLUMNS.\nshopt -s checkwinsize\n\n# If set, the pattern \"**\" used in a pathname expansion context will\n# match all files and zero or more directories and subdirectories.\n#shopt -s globstar\n\n# make less more friendly for non-text input files, see lesspipe(1)\n[ -x /usr/bin/lesspipe ] && eval \"$(SHELL=/bin/sh lesspipe)\"\n\n# set variable identifying the chroot you work in (used in the prompt below)\nif [ -z \"${debian_chroot:-}\" ] && [ -r /etc/debian_chroot ]; then\n    debian_chroot=$(cat /etc/debian_chroot)\nfi\n\n# set a fancy prompt (non-color, unless we know we \"want\" color)\ncase \"$TERM\" in\n    xterm-color|*-256color) color_prompt=yes;;\nesac\n\n# uncomment for a colored prompt, if the terminal has the capability; turned\n# off by default to not distract the user: the focus in a terminal window\n# should be on the output of commands, not on the prompt\n#force_color_prompt=yes\n\nif [ -n \"$force_color_prompt\" ]; then\n    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then\n\t# We have color support; assume it's compliant with Ecma-48\n\t# (ISO/IEC-6429). (Lack of such support is extremely rare, and such\n\t# a case would tend to support setf rather than setaf.)\n\tcolor_prompt=yes\n    else\n\tcolor_prompt=\n    fi\nfi\n\nif [ \"$color_prompt\" = yes ]; then\n    PS1='${debian_chroot:+($debian_chroot)}\\[\\033[01;32m\\]\\u@\\h\\[\\033[00m\\]:\\[\\033[01;34m\\]\\w\\[\\033[00m\\]\\$ '\nelse\n    PS1='${debian_chroot:+($debian_chroot)}\\u@\\h:\\w\\$ '\nfi\nunset color_prompt force_color_prompt\n\n# If this is an xterm set the title to user@host:dir\ncase \"$TERM\" in\nxterm*|rxvt*)\n    PS1=\"\\[\\e]0;${debian_chroot:+($debian_chroot)}\\u@\\h: \\w\\a\\]$PS1\"\n    ;;\n*)\n    ;;\nesac\n\n# enable color support of ls and also add handy aliases\nif [ -x /usr/bin/dircolors ]; then\n    test -r ~/.dircolors && eval \"$(dircolors -b ~/.dircolors)\" || eval \"$(dircolors -b)\"\n    alias ls='ls --color=auto'\n    #alias dir='dir --color=auto'\n    #alias vdir='vdir --color=auto'\n\n    alias grep='grep --color=auto'\n    alias fgrep='fgrep --color=auto'\n    alias egrep='egrep --color=auto'\nfi\n\n# colored GCC warnings and errors\n#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'\n\n# Add an \"alert\" alias for long running commands.  Use like so:\n#   sleep 10; alert\nalias alert='notify-send --urgency=low -i \"$([ $? = 0 ] && echo terminal || echo error)\" \"$(history|tail -n1|sed -e '\\''s/^\\s*[0-9]\\+\\s*//;s/[;&|]\\s*alert$//'\\'')\"'\n\n# Alias definitions.\n# You may want to put all your additions into a separate file like\n# ~/.bash_aliases, instead of adding them here directly.\n# See /usr/share/doc/bash-doc/examples in the bash-doc package.\n\nif [ -f ~/.bash_aliases ]; then\n    . ~/.bash_aliases\nfi\n\n# enable programmable completion features (you don't need to enable\n# this, if it's already enabled in /etc/bash.bashrc and /etc/profile\n# sources /etc/bash.bashrc).\nif ! shopt -oq posix; then\n  if [ -f /usr/share/bash-completion/bash_completion ]; then\n    . /usr/share/bash-completion/bash_completion\n  elif [ -f /etc/bash_completion ]; then\n    . /etc/bash_completion\n  fi\nfi\n###\n# begin user defined settings\n###\n\nbash_config=\"~/bin/lib/.config/config.bash\"\nvim_config=\"~/bin/lib/.config/config.vim\"\n\n# some more ls aliases\nalias ll='ls -alF'\nalias la='ls -A'\nalias l='ls -CF'\n\nif [[ ! $DISPLAY && $XDG_VTNR -eq 1 ]]; then\n  exec startx\nfi\n\n# reduce the directory listing\nPROMPT_DIRTRIM=2\n\n# show the current working branch when in a git repository\nparse_git_branch() {\n     git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \\(.*\\)/ (\\1)/'\n}\n\n# changes the prompt to include the current git branch\nexport PS1=\"\\[\\033[31m\\]\\u\\[\\033[32m\\]\\w\\[\\033[33m\\]\\$(parse_git_branch)\\[\\033[31m\\] $ \\[\\033[00m\\]\"\n\n# add current folder to PATH and userbin\nPATH=$PATH:.:~/bin\n\n# set the default editor to vim\nexport EDITOR=\"vim\"\n\n## alias clear='clear && l'\n## alias vd='vim -dR'\nalias h='history'\nalias editbash=\"vim $bash_config && source $bash_config\"\nalias editvim=\"vim $vim_config\"\nalias mkae='make'\nalias \"..1\"='cd ..'\nalias \"..2\"='cd ../..'\nalias \"..3\"='cd ../../..'\nalias \"..4\"='cd ../../../..'\nalias \"..5\"='cd ../../../../..'\nalias unmount='umount'\nalias cookie='cowsay -f $(ls /usr/share/cowsay/cows/ | shuf -n 1) $(fortune)'\nalias jaguar='sshuttle --exclude 132.241.1.11 -r acorley@jaguar.ecst.csuchico.edu 0/0 --dns -v'\n#alias tmux='TERM=xterm-256colors tmux'\nalias rot13=\"tr 'A-Za-z' 'N-ZA-Mn-za-m'\"\nalias pfire='firefox --private'\nalias term='gnome-terminal'\nalias awksum=\"awk '{ sum += \\$1 } END {printf \\\"%.0f\\n\\\", sum}'\"\nalias pow=\"poweroff\"\n\nmkdircd() {\n  mkdir $1; cd $1;\n}\n\n"}, "git": {"dest": "~/.gitconfig", "content": "[user]\n\temail = xandy@corley.org\n\tname = Alexander Corley\n[push]\n\tdefault = simple\n[alias]\n\ts = status -s\n\tss = status\n\tc = commit -v\n\tchk = checkout\n  d = diff\n  dd = diff HEAD\n  g = grep -n\n  a = add\n  p = pull --rebase\n  ce = config --global -e\n  l = log --graph --oneline\n  ll = log\n  whatadded = log --diff-filter=A\n  skip = update-index --skip-worktree\n  unskip = update-index --no-skip-worktree\n[branch]\n\tautosetuprebase = always\n"}, "i3": {"dest": "~/.config/i3/config", "content": "# i3 config file (v4)\n#\n# Please see https://i3wm.org/docs/userguide.html for a complete reference!\n#\n# This config file uses keycodes (bindsym) and was written for the QWERTY\n# layout.\n#\n# To get a config file with the same key positions, but for your current\n# layout, use the i3-config-wizard\n#\n\n# Font for window titles. Will also be used by the bar unless a different font\n# is used in the bar {} block below.\nfont pango:monospace 8\n\n# This font is widely installed, provides lots of unicode glyphs, right-to-left\n# text rendering and scalability on retina/hidpi displays (thanks to pango).\n#font pango:DejaVu Sans Mono 8\n\n# Before i3 v4.8, we used to recommend this one as the default:\n# font -misc-fixed-medium-r-normal--13-120-75-75-C-70-iso10646-1\n# The font above is very space-efficient, that is, it looks good, sharp and\n# clear in small sizes. However, its unicode glyph coverage is limited, the old\n# X core fonts rendering does not support right-to-left and this being a bitmap\n# font, it doesn't scale on retina/hidpi displays.\n\n# use these keys for focus, movement, and resize directions when reaching for\n# the arrows is not convenient\nset $up l\nset $down k\nset $left j\nset $right semicolon\n\n# use Mouse+Mod1 to drag floating windows to their wanted position\nfloating_modifier Mod1\n\n# start a terminal\n#bindsym Mod1+Return exec i3-sensible-terminal\n\n# kill focused window\nbindsym Mod1+Shift+q kill\n\n# start dmenu (a program launcher)\nbindsym Mod1+d exec dmenu_run\n# There also is the (new) i3-dmenu-desktop which only displays applications\n# shipping a .desktop file. It is a wrapper around dmenu, so you need that\n# installed.\n# bindsym Mod1+d exec --no-startup-id i3-dmenu-desktop\n\n# change focus\nbindsym Mod1+$left focus left\nbindsym Mod1+$down focus down\nbindsym Mod1+$up focus up\nbindsym Mod1+$right focus right\n\n# alternatively, you can use the cursor keys:\nbindsym Mod1+Left focus left\nbindsym Mod1+Down focus down\nbindsym Mod1+Up focus up\nbindsym Mod1+Right focus right\n\n# move focused window\nbindsym Mod1+Shift+$left move left\nbindsym Mod1+Shift+$down move down\nbindsym Mod1+Shift+$up move up\nbindsym Mod1+Shift+$right move right\n\n# alternatively, you can use the cursor keys:\nbindsym Mod1+Shift+Left move left\nbindsym Mod1+Shift+Down move down\nbindsym Mod1+Shift+Up move up\nbindsym Mod1+Shift+Right move right\n\n# split in horizontal orientation\nbindsym Mod1+h split h\n\n# split in vertical orientation\nbindsym Mod1+v split v\n\n# enter fullscreen mode for the focused container\nbindsym Mod1+f fullscreen toggle\n\n# change container layout (stacked, tabbed, toggle split)\nbindsym Mod1+s layout stacking\nbindsym Mod1+w layout tabbed\nbindsym Mod1+e layout toggle split\n\n# toggle tiling / floating\nbindsym Mod1+Shift+space floating toggle\n\n# change focus between tiling / floating windows\nbindsym Mod1+space focus mode_toggle\n\n# focus the parent container\nbindsym Mod1+a focus parent\n\n# focus the child container\n#bindsym Mod1+d focus child\n\n# move the currently focused window to the scratchpad\nbindsym Mod1+Shift+minus move scratchpad\n\n# Show the next scratchpad window or hide the focused scratchpad window.\n# If there are multiple scratchpad windows, this command cycles through them.\nbindsym Mod1+minus scratchpad show\n\n# Define names for default workspaces for which we configure key bindings later on.\n# We use variables to avoid repeating the names in multiple places.\nset $ws1 \"1:TERM\"\nset $ws2 \"2:WEB\"\nset $ws3 \"3\"\nset $ws4 \"4\"\nset $ws5 \"5\"\nset $ws6 \"6\"\nset $ws7 \"7\"\nset $ws8 \"8\"\nset $ws9 \"9\"\nset $ws10 \"10\"\n\n\n# switch to workspace\nbindsym Mod1+1 workspace $ws1\nbindsym Mod1+2 workspace $ws2\nbindsym Mod1+3 workspace $ws3\nbindsym Mod1+4 workspace $ws4\nbindsym Mod1+5 workspace $ws5\nbindsym Mod1+6 workspace $ws6\nbindsym Mod1+7 workspace $ws7\nbindsym Mod1+8 workspace $ws8\nbindsym Mod1+9 workspace $ws9\nbindsym Mod1+0 workspace $ws10\n\n# move focused container to workspace\nbindsym Mod1+Shift+1 move container to workspace $ws1\nbindsym Mod1+Shift+2 move container to workspace $ws2\nbindsym Mod1+Shift+3 move container to workspace $ws3\nbindsym Mod1+Shift+4 move container to workspace $ws4\nbindsym Mod1+Shift+5 move container to workspace $ws5\nbindsym Mod1+Shift+6 move container to workspace $ws6\nbindsym Mod1+Shift+7 move container to workspace $ws7\nbindsym Mod1+Shift+8 move container to workspace $ws8\nbindsym Mod1+Shift+9 move container to workspace $ws9\nbindsym Mod1+Shift+0 move container to workspace $ws10\n\nbindsym Mod1+Shift+Ctrl+1 [workspace=$ws1] kill\nbindsym Mod1+Shift+Ctrl+2 [workspace=$ws2] kill\nbindsym Mod1+Shift+Ctrl+3 [workspace=$ws3] kill\nbindsym Mod1+Shift+Ctrl+4 [workspace=$ws4] kill\nbindsym Mod1+Shift+Ctrl+5 [workspace=$ws5] kill\nbindsym Mod1+Shift+Ctrl+6 [workspace=$ws6] kill\nbindsym Mod1+Shift+Ctrl+7 [workspace=$ws7] kill\nbindsym Mod1+Shift+Ctrl+8 [workspace=$ws8] kill\nbindsym Mod1+Shift+Ctrl+9 [workspace=$ws9] kill\nbindsym Mod1+Shift+Ctrl+0 [workspace=$ws10] kill\n\n# reload the configuration file\nbindsym Mod1+Shift+c reload\n# restart i3 inplace (preserves your layout/session, can be used to upgrade i3)\nbindsym Mod1+Shift+r restart\n# exit i3 (logs you out of your X session)\nbindsym Mod1+Shift+e exec \"i3-nagbar -t warning -m 'You pressed the exit shortcut. Do you really want to exit i3? This will end your X session.' -b 'Yes, exit i3' 'i3-msg exit'\"\n\n# resize window (you can also use the mouse for that)\nmode \"resize\" {\n        # These bindings trigger as soon as you enter the resize mode\n\n        # Pressing left will shrink the window\u2019s width.\n        # Pressing right will grow the window\u2019s width.\n        # Pressing up will shrink the window\u2019s height.\n        # Pressing down will grow the window\u2019s height.\n        bindsym $left       resize shrink width 10 px or 10 ppt\n        bindsym $down       resize grow height 10 px or 10 ppt\n        bindsym $up         resize shrink height 10 px or 10 ppt\n        bindsym $right      resize grow width 10 px or 10 ppt\n\n        # same bindings, but for the arrow keys\n        bindsym Left        resize shrink width 10 px or 10 ppt\n        bindsym Down        resize grow height 10 px or 10 ppt\n        bindsym Up          resize shrink height 10 px or 10 ppt\n        bindsym Right       resize grow width 10 px or 10 ppt\n\n        # back to normal: Enter or Escape or Mod1+r\n        bindsym Return mode \"default\"\n        bindsym Escape mode \"default\"\n        bindsym Mod1+r mode \"default\"\n}\n\nbindsym Mod1+r mode \"resize\"\n\n# Start i3bar to display a workspace bar (plus the system information i3status\n# finds out, if available)\nbar {\n        status_command i3status\n        strip_workspace_numbers yes\n}\n\n# user defined settings\nbindsym XF86AudioRaiseVolume exec pactl set-sink-volume 0 +5% #increase sound volume\nbindsym XF86AudioLowerVolume exec pactl set-sink-volume 0 -5% #decrease sound volume\nbindsym XF86AudioMute exec pactl set-sink-mute 0 toggle # mute sound\n\nbindsym XF86MonBrightnessUp exec xbacklight -inc 10 # increase screen brightness\nbindsym XF86MonBrightnessDown exec xbacklight -dec 10 # decrease screen brightness\n\nbindsym --release Print exec \"scrot '%Y-%m-%d-%s_screenshot.jpg' -e 'mv $f ~/Pictures/'\"\n\n# The middle button over a titlebar kills the window\nbindsym --release button2 kill window\n\nbindsym Mod1+Return exec gnome-terminal -e tmux\nexec \"xrandr --dpi 215\"\n\nexec --no-startup-id /usr/bin/feh --bg-scale ~/images/wall.png\n\nexec --no-startup-id i3-msg \"workspace $ws2; exec firefox; workspace $ws1; exec gnome-terminal -e tmux\"\n\nassign [class=\"Firefox\"] $ws2\nfor_window [class=\"discord\"] move to workspace $ws3\nfor_window [class=\"Firefox\"] move to workspace $ws2\n\nfloating_maximum_size 856 x 585\n"}, "i3status": {"dest": "~/.config/i3status/config", "content": "# i3status configuration file.\n# see \"man i3status\" for documentation.\n\n# It is important that this file is edited as UTF-8.\n# The following line should contain a sharp s:\n# \u00df\n# If the above line is not correctly displayed, fix your editor first!\n\ngeneral {\n  colors = true\n  interval = 3\n  separator = \"|\"\n}\n\norder += \"volume master\"\norder += \"disk /\"\norder += \"disk /home\"\norder += \"wireless _first_\"\norder += \"battery all\"\norder += \"load\"\norder += \"tztime local\"\n\nvolume master {\n  format = \"\u266b: %volume\"\n  format_muted = \"\u266b: muted (%volume)\"\n  device = \"default\"\n  mixer = \"Master\"\n  mixer_idx = 0\n}\n\nwireless _first_ {\n  format_up = \"W: %ip %essid (%quality )\"\n  format_down = \"W: down\"\n}\n\nbattery all {\n  format = \"%status %percentage %remaining\"\n  last_full_capacity = true\n}\n\ntztime local {\n  format = \"%Y-%m-%d %H:%M:%S\"\n}\n\nload {\n  format = \"%1min\"\n}\n\ndisk \"/\" {\n  format = \"/ %percentage_used\"\n}\n\ndisk \"/home\" {\n  format = \"/home %percentage_used\"\n}\n"}, "vim": {"dest": "~/.vimrc", "content": "set tabstop=2\nset softtabstop=2\nset expandtab\n\nautocmd FileType make set noexpandtab | set autoindent\nautocmd FileType markdown set wrap\n\nset showmatch\n\nset wrap lbr\nset nowrap\nset showcmd\n\n\"set cursorline\n\nset number\nsyntax on\ncolorscheme unicon\nset background=dark\n\nif has(\"autocmd\")\n  au BufReadPost * if line(\"'\\\"\") > 1 && line(\"'\\\"\") <= line(\"$\") | exe \"normal! g'\\\"\" | endif\nendif\n\n\" ignore these files when completing names and in Ex\nset wildignore=.svn,CVS,.git,*.oi,*.d,*.a,*.class,*.mo,*.la,*.so,*.obj,*.swp,*.jpg,*.png,*.xpm,*.gif,*.pdf,*.bak,*.beam\n\nautocmd BufRead,BufNewFile,BufWritePost *.sage set filetype=python \n\" autocmd Filetype cpp command Comment :s/^/\\/\\//\n"}, "tmux": {"dest": "~/.tmux.conf", "content": "#remap prefix to c-a\nset -g prefix C-a\nbind C-a send-prefix\nunbind C-b\nunbind D\nunbind d\n\n# set the start index to 1 (sacrilege) but 0 is too far\nset -g base-index 1\n\n# Automatically set window title\nset-window-option -g automatic-rename on\nset-option -g set-titles on\n#set -g default-terminal \"screen-256color\"\n\nset -g mouse on\nbind -n WheelUpPane if-shell -F -t = \"#{mouse_any_flag}\" \"send-keys -M\" \"if -Ft= '#{pane_in_mode}' 'send-keys -M' 'select-pane -t=; copy-mode -e; send-keys -M'\"\nbind -n WheelDownPane select-pane -t= \\; send-keys -M\n\n# bind v and s to split horizontally and vertically\nbind-key v split-window -h -c '#{pane_current_path}'\nbind-key s split-window -v -c '#{pane_current_path}'\n\nset -g lock-after-time 600\nset -g lock-command \"/usr/bin/cmatrix -s -C red -u 3\"\n"}}